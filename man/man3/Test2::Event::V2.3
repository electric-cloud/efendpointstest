.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test2::Event::V2 3"
.TH Test2::Event::V2 3 "2018-08-13" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Test2::Event::V2 \- Second generation event.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the event type that should be used instead of Test2::Event or its
legacy subclasses.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "\s-1USING\s0 A \s-1CONTEXT\s0"
.IX Subsection "USING A CONTEXT"
.Vb 1
\&    use Test2::API qw/context/;
.Ve
.PP
.Vb 2
\&    sub my_tool {
\&        my $ctx = context();
.Ve
.PP
.Vb 1
\&        my $event = $ctx->send_ev2(info => [{tag => 'NOTE', details => "This is a note"}]);
.Ve
.PP
.Vb 1
\&        $ctx->release;
.Ve
.PP
.Vb 2
\&        return $event;
\&    }
.Ve
.Sh "\s-1USING\s0 \s-1THE\s0 \s-1CONSTRUCTOR\s0"
.IX Subsection "USING THE CONSTRUCTOR"
.Vb 1
\&    use Test2::Event::V2;
.Ve
.PP
.Vb 4
\&    my $e = Test2::Event::V2->new(
\&        trace => {frame => [$PKG, $FILE, $LINE, $SUBNAME]},
\&        info  => [{tag => 'NOTE', details => "This is a note"}],
\&    );
.Ve
.SH "METHODS"
.IX Header "METHODS"
This class inherits from Test2::Event.
.ie n .IP "$fd = $e\fR\->\fIfacet_data()" 4
.el .IP "$fd = \f(CW$e\fR\->\fIfacet_data()\fR" 4
.IX Item "$fd = $e->facet_data()"
This will return a hashref of facet data. Each facet hash will be a shallow
copy of the original.
.ie n .IP "$about = $e\fR\->\fIabout()" 4
.el .IP "$about = \f(CW$e\fR\->\fIabout()\fR" 4
.IX Item "$about = $e->about()"
This will return the 'about' facet hashref.
.Sp
\&\fB\s-1NOTE:\s0\fR This will return the internal hashref, not a copy.
.ie n .IP "$trace = $e\fR\->\fItrace()" 4
.el .IP "$trace = \f(CW$e\fR\->\fItrace()\fR" 4
.IX Item "$trace = $e->trace()"
This will return the 'trace' facet, normally blessed (but this is not enforced
when the trace is set using \f(CW\*(C`set_trace()\*(C'\fR.
.Sp
\&\fB\s-1NOTE:\s0\fR This will return the internal trace, not a copy.
.Sh "\s-1MUTATION\s0"
.IX Subsection "MUTATION"
.IP "$e\->add_amnesty({...})" 4
.IX Item "$e->add_amnesty({...})"
Inherited from Test2::Event. This can be used to add 'amnesty' facets to an
existing event. Each new item is added to the \fB\s-1END\s0\fR of the list.
.Sp
\&\fB\s-1NOTE:\s0\fR Items \fB\s-1ARE\s0\fR blessed when added.
.IP "$e\->add_hub({...})" 4
.IX Item "$e->add_hub({...})"
Inherited from Test2::Event. This is used by hubs to stamp events as they
pass through. New items are added to the \fB\s-1START\s0\fR of the list.
.Sp
\&\fB\s-1NOTE:\s0\fR Items \fB\s-1ARE\s0 \s-1NOT\s0\fR blessed when added.
.IP "$e\->set_uuid($UUID)" 4
.IX Item "$e->set_uuid($UUID)"
Inherited from Test2::Event, overridden to also vivify/mutate the 'about'
facet.
.IP "$e\->set_trace($trace)" 4
.IX Item "$e->set_trace($trace)"
Inherited from Test2::Event which allows you to change the trace.
.Sp
\&\fBNote:\fR This method does not bless/clone the trace for you. Many things will
expect the trace to be blessed, so you should probably do that.
.Sh "\s-1LEGACY\s0 \s-1SUPPORT\s0 \s-1METHODS\s0"
.IX Subsection "LEGACY SUPPORT METHODS"
These are all imported from Test2::Util::Facets2Legacy, see that module or
Test2::Event for documentation on what they do.
.IP "causes_fail" 4
.IX Item "causes_fail"
.PD 0
.IP "diagnostics" 4
.IX Item "diagnostics"
.IP "global" 4
.IX Item "global"
.IP "increments_count" 4
.IX Item "increments_count"
.IP "no_display" 4
.IX Item "no_display"
.IP "sets_plan" 4
.IX Item "sets_plan"
.IP "subtest_id" 4
.IX Item "subtest_id"
.IP "summary" 4
.IX Item "summary"
.IP "terminate" 4
.IX Item "terminate"
.PD
.SH "THIRD PARTY META-DATA"
.IX Header "THIRD PARTY META-DATA"
This object consumes Test2::Util::ExternalMeta which provides a consistent
way for you to attach meta-data to instances of this class. This is useful for
tools, plugins, and other extensions.
.SH "SOURCE"
.IX Header "SOURCE"
The source code repository for Test2 can be found at
\&\fIhttp://github.com/Test\-More/test\-more/\fR.
.SH "MAINTAINERS"
.IX Header "MAINTAINERS"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "AUTHORS"
.IX Header "AUTHORS"
.PD 0
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.PD
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 Chad Granum <exodist@cpan.org>.
.PP
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See \fIhttp://dev.perl.org/licenses/\fR
